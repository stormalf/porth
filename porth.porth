// standard library
INCLUDE "include/std.porth"
//assembly macro
INCLUDE "porth_assembler.porth"

//to store file descriptor for output assembly file
VAR fw u8 

//macro to write into a file 
MACRO putf
fw write
ENDM


//op macros
MACRO OP_PUSH_INT 0 ENDM
MACRO OP_PLUS 1 ENDM
MACRO OP_PRINT 2 ENDM

//memory macros
MACRO PUTD_BUFFER_CAP 32 ENDM 
MACRO putd_buffer MEM ENDM
MACRO MEM_CAPACITY 640000 ENDM


//write numbers as strings
MACRO putd
  DUP 0 = IF
    "0" putf
  ELSE
    putd_buffer PUTD_BUFFER_CAP +
    WHILE OVER 0 > DO
      1 - DUP ROT 
      10 DIVMOD
      ROT SWAP '0' + @ SWAP
    END
    DUP    
    putd_buffer PUTD_BUFFER_CAP + SWAP - SWAP putf
  END
  //DROP will be done in the main loop to drop memory address
ENDM

MACRO ops-count 
putd_buffer PUTD_BUFFER_CAP +   
ENDM

MACRO ops 
ops-count 8 + 
ENDM

MACRO sizeof(Op) 
16 
ENDM

//0 34  (0*16) + 8) + index   
MACRO push-op 
ops-count $64 sizeof(Op) MUL ops + 
DUP 8 + ROT @64 SWAP
@64  
ops-count inc64 
ENDM

MACRO dump-ops
0 WHILE DUP ops-count $64 < DO
DUP sizeof(Op) MUL ops + 
"Type:       " puts DUP $64 .
"Operand:    " puts 8 + $64 .
"----------\n" puts
1 +
END
ENDM

//struct OP {
//    type: u64,
//    operand: u64
//}

//simulation mode not implemented yet
MACRO simulate-op
"TODO: simulation not implemented yet\n" putf 1 EXIT
ENDM


//compilation mode works fine for simple operations
MACRO compile-ops 
"./bin/hello2.asm" OPENW !fw
common_header
header2
0 WHILE DUP ops-count $64 < DO
//ptr type
DUP sizeof(Op) MUL ops + 
DUP $64 OP_PUSH_INT = IF
    "; push \n" putf   
    "mov rax, " putf 8 + $64 putd "\n" putf       
    "push rax\n" putf
    //DROP
ELSE
    DUP $64 OP_PLUS = IF
      generate_op_add

    ELSE
        DUP $64 OP_PRINT = IF
          generate_op_dump
        ELSE
            "unreachable\n" puts 1 EXIT
        END
        END
        END
DROP //drop memory address!
1 +
END
footer
data
bss
fw CLOSE
ENDM 

OP_PUSH_INT 35 push-op
OP_PUSH_INT 36 push-op
OP_PLUS 0 push-op
OP_PRINT 0 push-op
OP_PUSH_INT 25 push-op
OP_PUSH_INT 26 push-op
OP_PLUS 0 push-op
OP_PRINT 0 push-op

//dump-ops
compile-ops

DROP //drop memory address!